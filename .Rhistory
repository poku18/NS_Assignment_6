library(igraph)
options(digits=3)
#Q1
g <- erdos.renyi.game(30, 0.17)
plot(g,vertex.label=NA)
library(igraph)
options(digits=3)
#Q1
g <- erdos.renyi.game(30, 0.17)
plot(g,vertex.label=NA, layout=layout_nicely())
graph1 <- erdos.renyi.game(30, 0.17)
plot(graph1,vertex.label=NA, layout=layout_nicely(graph1))
graph1 <- erdos.renyi.game(30, 0.17)
plot(graph1,vertex.label=NA, layout=layout_with_dh(graph1))
plot(graph1,vertex.label=NA, layout=layout_with_gem(graph1))
print(ecount(g))
deg <- degree_distribution(g)
print(deg)
print(table(deg))
print(deg)
hist(deg, col="skyblue")
hist(deg, breaks=10 col="skyblue")
hist(deg, breaks=10, col="skyblue")
hist(deg, breaks=5, col="skyblue")
hist(deg, col="skyblue")
library(igraph)
options(digits=3)
#Q1
graph1 <- erdos.renyi.game(30, 0.17)
plot(graph1,vertex.label=NA, layout=layout_with_gem(graph1))
#Q2 a) How many edges were created?
print(ecount(g))
#Q2 B) Compute the degree distribution of the network.
deg <- degree_distribution(g)
print(deg)
#Q2 c) Plot a histogram of the degree distribution.
hist(deg, col="skyblue")
library(igraph)
options(digits=3)
#Q1
graph1 <- erdos.renyi.game(30, 0.17)
plot(graph1,vertex.label=NA, layout=layout_with_gem(graph1))
#Q2 a) How many edges were created?
print(ecount(g))
#Q2 B) Compute the degree distribution of the network.
deg <- degree_distribution(g)
print(deg)
#Q2 c) Plot a histogram of the degree distribution.
hist(deg, col="skyblue")
#Q2 d) Compute the density of the network.
print(graph.density(g))
print(graph.density(graph1))
#Q2 d) Compute the density of the network.
print(graph.density(graph1))
#Q3 a) Calculate the density of graph2.
graph2 <- erdos.renyi.game(30, 0.5)
print(graph.density(graph2))
graph2 <- erdos.renyi.game(100, 0.5)
print(graph.density(graph2)) #0.504
#Q3 d) Increase the number of nodes of graph2 to 100 (p still remains 0.5) and compute the density of the network. ?
graph2 <- erdos.renyi.game(100, 0.5)
print(graph.density(graph2)) #0.504
#Q3 a) Calculate the density of graph2.
graph2 <- erdos.renyi.game(30, 0.5)
print(graph.density(graph2))
#Q3 a) Calculate the density of graph2.
graph2 <- erdos.renyi.game(30, 0.5)
print(graph.density(graph2))
graph2 <- erdos.renyi.game(100, 0.5)
print(graph.density(graph2)) #0.504
graph2 <- erdos.renyi.game(100, 0.5)
print(graph.density(graph2)) #0.504
graph2 <- erdos.renyi.game(100, 0.5)
print(graph.density(graph2)) #0.504
plot(graph1,vertex.label=NA, layout=layout_with_gem(graph1))
plot(graph2,vertex.label=NA, layout=layout_with_gem(graph2))
graph2 <- erdos.renyi.game(30, 0.5)
print(graph.density(graph2))
plot(graph2,vertex.label=NA, layout=layout_with_gem(graph2))
#Q4 Plot the graph with preferential attachment
graph1_pa <- sample_pa(30)
plot(graph1_pa)
plot(graph1_pa, arr.width =1)
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.5)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
graph2_pa <- sample_pa(30,1)
plot(graph2_pa,vertex.label=NA,edge.arrow.size=0.3)
graph2_pa <- sample_pa(30,3)
plot(graph2_pa,vertex.label=NA,edge.arrow.size=0.3)
print(graph.density(graph1_pa))
print(graph.density(graph2_pa))
#Q4 Plot the graph with preferential attachment
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
#Q4 a) Calculate the density of graph1_pa and compare that to the density of graph1 and graph2 from Q1 and Q3.
print(graph.density(graph1_pa)) #0.033 The density is lower than the previous graphs
#Q4 b) Carry out a random walk on the graph and return the vertices that the random walk passed through
w<- random_walk(graph1_pa,start=1,steps=8)
print(table(w))
#Q4 c) Increase the power of the preferential attachment from 1 (default) to 3 and plot another random graph (graph2_pa)
graph2_pa <- sample_pa(30,3)
plot(graph2_pa,vertex.label=NA,edge.arrow.size=0.3)
#Q4 d) Calculate the density of graphs graph1_pa and graph2_pa.
print(graph.density(graph1_pa))
print(graph.density(graph2_pa))
graph3_pa <- sample_pa(100,3)
plot(graph3_pa,vertex.label=NA,edge.arrow.size=0.3)
print(graph.density(graph3_pa))
graph3_pa <- sample_pa(100,2)
plot(graph3_pa,vertex.label=NA,edge.arrow.size=0.3)
print(graph.density(graph3_pa))
graph3_pa <- sample_pa(100,1)
plot(graph3_pa,vertex.label=NA,edge.arrow.size=0.3)
print(graph.density(graph3_pa))
w<- random_walk(graph1_pa,start=1,steps=8,mode = c("in"))
print(table(w))
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label=NA,edge.arrow.size=0.3)
plot(graph1_pa,edge.arrow.size=0.3)
w<- random_walk(graph1_pa,start=1,steps=8,mode = c("in"))
print(table(w))
